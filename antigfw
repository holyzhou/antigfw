#!/usr/bin/python
# -*- coding: utf-8 -*-
import os, sys, time, signal, getopt, logging
from os import path
from contextlib import contextmanager

def import_config(cfgs, d=None):
    if d is None: d = {}
    for cfg in reversed(cfgs):
        if not path.exists(cfg): continue
        try:
            with open(path.expanduser(cfg)) as fi:
                eval(compile(fi.read(), cfg, 'exec'), d)
        except (OSError, IOError): print >>sys.stderr, 'import config'
    return dict([(k, v) for k, v in d.iteritems() if not k.startswith('_')])

def initlog(lv, logfile=None):
    rootlog = logging.getLogger()
    if logfile: handler = logging.FileHandler(logfile)
    else: handler = logging.StreamHandler()
    handler.setFormatter(
        logging.Formatter(
            '%(asctime)s,%(msecs)03d (%(process)d)%(name)s[%(levelname)s]: %(message)s',
            '%H:%M:%S'))
    rootlog.addHandler(handler)
    rootlog.setLevel(lv)
    return rootlog

def daemonized(parentalive=False, pidfile=None, logfile=None, chdir=True):
    if pidfile and path.exists(pidfile):
        with open(pidfile) as fi: pid = int(fi.read().strip())
        if path.exists('/proc/%d/exe' % pid): return -1
    try:
        pid = os.fork()
        if pid > 0:
            if parentalive: return pid
            else: os._exit(0)
    except OSError: os._exit(1)
    os.setsid()
    os.umask(0)
    with open('/dev/null', 'r') as dev_null:
        os.dup2(dev_null.fileno(), 0)
        if logfile:
            with open(logfile, 'a') as f:
                os.dup2(f.fileno(), 1)
                os.dup2(f.fileno(), 2)
        else:
            os.dup2(dev_null.fileno(), 1)
            os.dup2(dev_null.fileno(), 2)
    if chdir:
        if not isinstance(chdir, basestring): chdir = '/'
        os.chdir(chdir)
    try:
        if os.fork() > 0: os._exit(0)
    except OSError: sys.exit(1)
    if pidfile:
        with open(pidfile, 'w') as fo: fo.write(str(os.getpid()))

@contextmanager
def lockfile(filename, share=False):
    logging.debug('locking %s' % filename)
    f = open(filename, 'r')
    fcntl.flock(f.fileno(), fcntl.LOCK_SH if share else fcntl.LOCK_EX)
    try: yield f
    finally:
        fcntl.flock(f.fileno(), fcntl.LOCK_UN)
        f.close()
        logging.debug('unlock %s' % filename)

def kill_stand(pids, timeout=5):
    if not pids: return
    t_start = time.time()
    logging.debug('try term %s.' % str(pids))
    for pid in pids:
        try: os.kill(pid, signal.SIGTERM)
        except OSError: pass
    while (time.time() - t_start) < timeout and pids:
        pid, st = os.waitpid(-1, os.WNOHANG)
        if pid: pids.remove(pid)
        time.sleep(0.1)
    logging.debug('try kill %s.' % str(pids))
    for pid in pids:
        try: os.kill(pid, signal.SIGKILL)
        except OSError: pass

def runner_wrap(runner):
    def inner(origpid):
        pid = os.fork()
        if pid > 0: return pid
        signal.signal(signal.SIGTERM, signal.SIG_DFL)
        st = 0
        try: st = runner(origpid)
        finally: os._exit(st)
    return inner

class Watcher(object):

    def __init__(self, runners, timeout=2, lifetime=None):
        self.timeout, self.times, self.idlefunc, self.pids = timeout, 0, [], {}
        for r in runners: self.register(r)
        if lifetime: self.regidle(lifetime)(self.killall)

    def register(self, func): self.pids[func] = 0

    def run(self):
        signal.signal(signal.SIGTERM, self.cleanup)
        for r, p in self.pids.iteritems(): self.pids[r] = r(p)
        while self.pids:
            try: self.waitpid()
            except KeyboardInterrupt: break
            except: logging.exception('watcher unknown exception')
        logging.info('system exit')

    def waitpid(self):
        time.sleep(self.timeout)
        try: pid, st = os.waitpid(-1, os.WNOHANG)
        except OSError: return
        if not pid: self.on_idle()
        else:
            for r, p in self.pids.iteritems():
                if p == pid:
                    self.pids[r] = r(pid)
                    break

    def killall(self): kill_stand(self.pids.values())

    def cleanup(self, signum, frame):
        if signum != signal.SIGTERM: return
        logging.info('signal TERM, start to stop childs')
        tokill = self.pids.values()
        self.pids.clear()
        kill_stand(tokill)

    def regidle(self, times=30):
        def recv(func):
            self.idlefunc.append((times, func))
            return func
        return recv

    def on_idle(self):
        self.times += 1
        try:
            for t, f in self.idlefunc:
                if self.times % t == 0: f()
        except: logging.exception('on idle unknown exception')

class SshRunner(object):

    def __init__(self, cfg):
        self.cfg = cfg
        self.args = ['ssh', '-CNq', '-o', 'ServerAliveInterval=30', 
                     '%s@%s' % (cfg['username'], cfg['sshhost']),]
        if 'sshport' in cfg: self.args.extend(('-p', cfg['sshport'],))
        if 'sockport' in cfg:
            self.args.extend(('-D', str(cfg['sockport']),))
            self.checkport = cfg['sockport']
        if 'listenport' in cfg:
            lopt = '%d:localhost:%d' % (cfg['listenport'][0], cfg['listenport'][1])
            self.args.extend(('-L', lopt,))
            self.checkport = cfg['listenport'][0]
        if 'sshprivfile' in cfg: self.args.extend(('-i', cfg['sshprivfile'],))
        if not hasattr(self, 'checkport'):
            raise Exception('no sockport or listenport')

    def run_passwd(self):
        import pexpect
        child = pexpect.spawn(' '.join(self.args))
        child.expect('password:')
        child.sendline(self.cfg['password'])
        return child.pid
        
    def run(self, pre_pid):
        if pre_pid: logging.info('prior ssh stopped, pid %d' % pre_pid)
        if self.cfg.get('password') and 'sshprivfile' not in self.cfg:
            self.pid = self.run_passwd()
        else: self.pid = os.spawnv(os.P_NOWAIT, '/usr/bin/ssh', self.args)
        logging.info('ssh starting pid %d with cmdline "%s"' % (
                self.pid, ' '.join(self.args)))
        return self.pid

    def keepconn(self):
        import socket
        sock = socket.socket()
        try:
            return sock.connect_ex(('127.0.0.1', self.checkport)) == 0
        finally: sock.close()

    def on_idle(self):
        if not self.keepconn(): kill_stand(self.pid)

def uniproxy_runner(configfile):
    @runner_wrap
    def real_runner(pre_pid):
        import uniproxy
        try: uniproxy.main(configfile)
        except: logging.exception('uniproxy unknown error')
        return 0
    return real_runner

def main():
    '''
    -c: config file
    -f: foreground
    -l: log file
    -h: help
    -p: pidfile
    '''
    optlist, args = getopt.getopt(sys.argv[1:], 'c:fl:hp:')
    optdict = dict(optlist)
    if '-h' in optdict:
        print main.__doc__
        return

    configfile = path.realpath(
        path.expanduser(optdict.get('-c', '/etc/antigfw/antigfw.conf')))
    config = import_config([configfile,])
    pidfile = path.realpath(
        path.expanduser(optdict.get('-p', '/var/run/antigfw.pid')))
    logfile = path.realpath(
        path.expanduser(optdict.get('-l', '/var/log/antigfw.log')))

    if '-f' not in optdict:
        daemonized(pidfile=pidfile, logfile=logfile)
    initlog(logging.WARNING)
    logging.info('daemoniz finished, new pid %d' % os.getpid())

    w = Watcher([])
    if config.get('autossh', None):
        for cfg in config['sshs']:
            r = SshRunner(cfg)
            w.register(r.run)
            w.regidle()(r.on_idle)
    if config.get('uniproxy', True): w.register(uniproxy_runner(configfile))
    w.run()

if __name__ == '__main__': main()
